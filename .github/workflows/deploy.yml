name: Deploy Persian Telegram Bot to GitHub Pages

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm init -y
          npm install --save-dev @types/node typescript
          
      - name: Validate files
        run: |
          echo "Validating HTML structure..."
          if [ ! -f "index.html" ]; then
            echo "Error: index.html not found"
            exit 1
          fi
          
          echo "Validating CSS..."
          if [ ! -f "styles.css" ]; then
            echo "Error: styles.css not found"
            exit 1
          fi
          
          echo "Validating JavaScript..."
          if [ ! -f "app.js" ]; then
            echo "Error: app.js not found"
            exit 1
          fi
          
          echo "Validating Service Worker..."
          if [ ! -f "sw.js" ]; then
            echo "Error: sw.js not found"
            exit 1
          fi
          
          echo "Validating PWA Manifest..."
          if [ ! -f "manifest.json" ]; then
            echo "Error: manifest.json not found"
            exit 1
          fi
          
          echo "All files validated successfully!"
          
      - name: Optimize files
        run: |
          echo "Optimizing CSS..."
          # Remove comments and extra whitespace from CSS
          sed 's/\/\*.*\*\///g' styles.css | tr -s ' ' > styles.min.css
          
          echo "Optimizing JavaScript..."
          # Basic JS optimization (remove comments)
          sed 's/\/\/.*$//g' app.js > app.min.js
          sed 's/\/\/.*$//g' sw.js > sw.min.js
          
          echo "Files optimized successfully!"
          
      - name: Generate build info
        run: |
          echo "Generating build information..."
          cat > build-info.json << EOF
          {
            "buildTime": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "version": "2.0.0",
            "environment": "production",
            "features": [
              "PWA Support",
              "Offline Functionality",
              "Background Sync",
              "Push Notifications",
              "Advanced UI",
              "Telegram API Integration",
              "AI Chat Support",
              "Smart Reminders",
              "Todo Management",
              "Weather Integration",
              "Calendar Functions"
            ]
          }
          EOF
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Post-deployment verification
        run: |
          echo "Deployment completed successfully!"
          echo "Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "Verifying deployment..."
          
          # Wait a moment for deployment to propagate
          sleep 10
          
          # Basic connectivity test
          if curl -f -s "${{ steps.deployment.outputs.page_url }}" > /dev/null; then
            echo "‚úÖ Site is accessible"
          else
            echo "‚ö†Ô∏è Site may not be immediately accessible (this is normal)"
          fi
          
          echo "üì± PWA Features:"
          echo "- Installable as mobile/desktop app"
          echo "- Offline functionality with service worker"
          echo "- Background sync for Telegram polling"
          echo "- Push notifications support"
          echo "- Advanced caching strategies"
          
          echo "ü§ñ Bot Features:"
          echo "- AI-powered conversations"
          echo "- Smart reminder system"
          echo "- Todo list management"
          echo "- Weather integration"
          echo "- Calendar functions"
          echo "- Message saving and search"
          
          echo "üîß Technical Features:"
          echo "- Client-side Telegram API polling"
          echo "- IndexedDB for persistent storage"
          echo "- CORS proxy for API calls"
          echo "- Responsive design for all devices"
          echo "- Modern ES6+ JavaScript"
          echo "- CSS Grid and Flexbox layouts"
